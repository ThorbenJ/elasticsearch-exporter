---

- name: "[Import {{ elex_index_real }}] Determin variables"
  set_fact:
    elex_target: "{{ elex_index_real }}"
    elex_datadir: "{{ elex_workdir~'/['~elex_index_real~']/'~elex_export_date }}"
  tags:
  - always

- name: "[Import {{ elex_index_real }}] Rename target"
  set_fact:
    elex_target: "{{ elex_index_real|regex_replace(re_op[1], re_op[2]) }}"
  vars:
    re_op: "{{ elex_rename.split('/')|list }}"
  when: elex_rename is defined and elex_rename is string
  failed_when: re_op|length!=4

- name: "[Import {{ elex_index_real }}] Check datadir"
  stat: path="{{ elex_datadir }}"
  register: stat
  failed_when: not stat.stat.isdir
  tags:
  - always

- name: "[Import {{ elex_index_real }}] Get file list"
  find:
    path: "{{ elex_datadir }}"
    patterns: "?{{ elex_index_real }}?_docs0*"
  register: file_list
  failed_when: file_list.matched<1
  no_log: "{{ _elex_supress_data_leak }}"
  tags:
  - always

- name: "[Import {{ elex_index_real }}] Read meta info"
  set_fact:
    index_meta_info:
      aliases: "{{ elex_restore_aliases|bool|ternary(raw_info.aliases, dict()) }}"
      mappings: "{{ raw_info.mappings }}"
      settings: "{{ raw_info.settings }}"
  vars:
    raw_info: "{{ lookup('pipe', 'gunzip -c '~elex_datadir~'/['~elex_index_real~']_metainfo.json.gz')|from_json }}"
  failed_when: index_meta_info.settings.index is not defined
  tags:
  - import
  - restore
  - meta

- name: "[Import {{ elex_index_real }}] Delete exiting index: {{ elex_target }}"
  uri:
    url: "{{ elex_elasticsearch_url }}/{{ elex_target }}"
    method: DELETE
    headers:
      Accept: "application/json"
    url_username: "{{ elex_login[0] }}"
    url_password: "{{ elex_login[1] }}"
    force_basic_auth: true
    timeout: 300
    status_code: [200, 404]
  register: result
  no_log: "{{ _elex_supress_data_leak }}"
  tags:
  - import
  - restore
  - meta

- name: "[Import {{ elex_index_real }}] Debug uri results"
  debug: var=result verbosity=1
  tags:
  - import
  - restore
  - meta

- name: "[Import {{ elex_index_real }}] Create and restore index meta info to {{ elex_target }}"
  uri:
    url: "{{ elex_elasticsearch_url }}/{{ elex_target }}"
    method: PUT
    body_format: json
    body: "{{ index_meta_info }}"
    headers:
      Accept: "application/json"
    url_username: "{{ elex_login[0] }}"
    url_password: "{{ elex_login[1] }}"
    force_basic_auth: true
    timeout: 300
  register: result
  no_log: "{{ _elex_supress_data_leak }}"
  tags:
  - import
  - restore
  - meta

- name: "[Import {{ elex_index_real }}] Debug uri results"
  debug: var=result verbosity=1
  tags:
  - import
  - restore
  - meta

- name: "[Import {{ elex_index_real }}] Restore documents to {{ elex_target }}"
  include_tasks: do_import_docs.yml
  loop: "{{ file_list.files|sort(attribute='path') }}"
  loop_control:
    label: "{{ elex_file.path|basename }} -> {{ elex_target }}"
    loop_var: elex_file
  tags:
  - import
  - restore
  - docs
